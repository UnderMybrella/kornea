apply plugin: 'org.jetbrains.kotlin.multiplatform'
//project.ext.sourceSetSuffixes = ["Main", "Test"]

version = '1.0.2-alpha'

//void defineSourceSet(newName, dependsOn, includedInPred) {
//    for (suffix in project.ext.sourceSetSuffixes) {
//        def newSS = kotlin.sourceSets.maybeCreate(newName + suffix)
//        for (dep in dependsOn) {
//            newSS.dependsOn(kotlin.sourceSets[dep + suffix])
//        }
//        for (curSS in kotlin.sourceSets) {
//            def curName = curSS.name
//            if (curName.endsWith(suffix)) {
//                def prefix = curName.substring(0, curName.length() - suffix.length())
//                if (includedInPred(prefix)) curSS.dependsOn(newSS)
//            }
//        }
//    }
//}

kotlin {
    /* Targets configuration omitted. 
    *  To find out how to configure the targets, please follow the link:
    *  https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html#setting-up-targets */
    jvm()
//    js()
//    mingwX64() {
//        binaries {
//            sharedLib {
//            }
//
//            staticLib {
//            }
//        }
//    }
//    linuxX64()

    sourceSets {
//        commonMain {
//            dependencies {
//                implementation kotlin('stdlib-common')
//                implementation project(':kornea-toolkit')
//            }
//        }
//        commonTest {
//            dependencies {
//                implementation kotlin('test-common')
//                implementation kotlin('test-annotations-common')
//            }
//        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
//                implementation kotlin('reflect')

                implementation project(':kornea-toolkit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }


        all {
            languageSettings {
                useExperimentalAnnotation("kotlin.RequiresOptIn")
                explicitApi()
            }
        }
    }
}

//defineSourceSet("reflective", ["common"]) { it in ["jvm"] }
